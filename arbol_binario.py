# -*- coding: utf-8 -*-
"""arbol_binario.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1dU2B_YUrUQB9-5fiVhaULYEgyvgTpYeu
"""

class Nodo:
    def __init__(self, nombre):
        self.nombre = nombre
        self.hijos = {}

    def agregar_hijo(self, nodo):
        self.hijos[nodo.nombre] = nodo

# Creamos los objetos, uno para cada nodo, a partir de la clase Nodo
raiz = Nodo("Felinos") #A
pantera_linaje = Nodo("Pantera linaje") #B
neofelis = Nodo("Neofelis") #C
pantera = Nodo("Pantera") #D
gatoBayo_linaje = Nodo("Gato Bayo linaje") #E
gatoBayo = Nodo("Gato Bayo") #F
lince_linaje = Nodo("Lince Linaje") #G
lince = Nodo("Lince") #H
ocelote_linaje = Nodo("Ocelote linaje") #I
leopardo = Nodo("Leopardo") #J
lynx_linaje = Nodo("Lynx linaje") #K
lynx = Nodo("Lynx") #L
puma_linaje = Nodo("Puma linaje") #M
cheeta = Nodo("Cheeta") #N
puma = Nodo("Puma") #O
leopardo_linaje = Nodo("Leopardo linaje") #P
manul = Nodo("Manul") #Q
gato_pescador = Nodo("Gato Pescador") #R
gatoDomestico_linaje = Nodo("Gato Domestico linaje") #S
felino_domestico = Nodo("Felino Domestico") #T

#Conectamos la raiz con sus hijos
raiz.agregar_hijo(pantera_linaje)
raiz.agregar_hijo(gatoBayo_linaje)

#Conectamos pantera linaje con sus hijos
pantera_linaje.agregar_hijo(pantera)
pantera_linaje.agregar_hijo(neofelis)

#Conectamos gato Bayo linaje con su hijos
gatoBayo_linaje.agregar_hijo(gatoBayo)
gatoBayo_linaje.agregar_hijo(lince_linaje)

#Conectamos lince linaje con su hijos
lince_linaje.agregar_hijo(lince)
lince_linaje.agregar_hijo(ocelote_linaje)

#Conectamos ocelote linaje con su hijos
ocelote_linaje.agregar_hijo(leopardo)
ocelote_linaje.agregar_hijo(lynx_linaje)

#Conectamos lynx linaje con su hijos
lynx_linaje.agregar_hijo(lynx)
lynx_linaje.agregar_hijo(puma_linaje)

#Conectamos puma linaje con sus hijos
puma_linaje.agregar_hijo(puma)
puma_linaje.agregar_hijo(cheeta)
puma_linaje.agregar_hijo(leopardo_linaje)
puma_linaje.agregar_hijo(gatoDomestico_linaje)

#Conectamos leopardo linaje con sus hijos
#leopardo_linaje.agregar_hijo(leopardo)
leopardo_linaje.agregar_hijo(manul)

#Conectamos gato domestico con su hijo
gatoDomestico_linaje.agregar_hijo(felino_domestico)

def imprimir_arbol(nodo, nivel=0): #nivel=0 indica el nivel de profundidad en el árbol
    print("  " * nivel + "- " + nodo.nombre) #"  " * nivel sangria / "- " + nodo.nombre guion delante del nombre
    for hijo in nodo.hijos.values(): #recorremos los hijos del nodo actual
        imprimir_arbol(hijo, nivel + 1) #llamamos a la función recursivamente con el hijo
imprimir_arbol(raiz)

#Funcion para calcular la altura
def calcular_altura(nodo):
    if not nodo.hijos: #si el nodo no tiene hijos
        return 1  #retorna 1 la altura es el nodo si no tiene hijos
    else:
        #el nodo actual es 1 + la máxima altura entre sus hijos
        return 1 + max(calcular_altura(hijo) for hijo in nodo.hijos.values()) # retorna la altura del nodo actual y suma 1 a la altura del hijo con mayor altura,
                                                                              # for : recorre todos los hijos del nodo actual y busca el hijo con mayor altura y lo suma al 1 de arriba
altura_arbol = calcular_altura(raiz) #calculamos la altura del árbol
print(f"Altura del árbol: {altura_arbol}")



#Funcion para calcular el peso
def calcular_peso(nodo):
    if not nodo.hijos: #si el nodo no tiene hijos retorna 1
        return 1  #nodo hoja actual
    else:
        return 1 + sum(calcular_peso(hijo) for hijo in nodo.hijos.values()) #retorna 1 + la suma de los pesos de sus hijos / for: recorre todos los hijos del nodo actual y los suma
peso_arbol = calcular_peso(raiz) #calculamos el peso del árbol
print(f"Peso del árbol: {peso_arbol}")



#Funcion para calcular la longitud
def calcular_longitud(nodo): # nodo es el nodo actual
    return calcular_altura(nodo) - 1 # retorna la altura del nodo actual - 1
longitud_arbol = calcular_longitud(raiz) #calculamos la longitud del árbol
print(f"Longitud del árbol: {longitud_arbol}")



#Funcion para calcular el grado
def calcular_grado(nodo):
    if not nodo.hijos: #si el nodo no tiene hijos retorna 0
        return 0  #grado 0 si no tiene hojas
    else:
        return max(len(nodo.hijos), max(calcular_grado(hijo) for hijo in nodo.hijos.values())) #retorna el grado del nodo actual y el grado del hijo con mayor grado / for: recorre todos los hijos del nodo actual y busca el hijo con mayor grado y lo suma al grado
grado_arbol = calcular_grado(raiz) #calculamos el grado del árbol
print(f"Grado del árbol: {grado_arbol}")